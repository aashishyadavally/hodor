"""Processes user query, either by text or image to retrieve relevant
images from the image database.
"""
import json
import heapq
import shutil
from pathlib import Path

import numpy as np

import tensorflow_hub as hub

from storyteller import pathfinder
from storyteller.search.objects import get_yolo_net, get_labels, detect_objects
from storyteller.search.encodings import MODULE_URL
from storyteller.utils.linguistic import extract_features
from storyteller.utils.similarity import get_similar_words, cosine_distance, dot_product


class ResultObject:
    def __init__(self, name, index, path_to_image, path_to_embed, score):
        """Data structure useful to track results generated by user query,
        containing image information such as file name, parameter ``index``,
        useful to retrieve image path.path to image, semantic score with
        user query.

        Comparison operators for ``ResultObject`` is determined based on
        the semantic similarity score of the caption corresponding to the
        result image with the user query.

        Parameters:
        -----------
            name (str):
                Name of image.
            index (int):
                Image index.
            path_to_image (pathlib.Path):
                Path to image.
            path_to_embed (pathlib.Path):
                Path to .npy sentence embedding.
            score (float):
                Semantic similarity score with given text.
        """
        self.name = name
        self.index = index
        self.path_to_image = path_to_image
        self.path_to_embed = path_to_embed
        self.score = score

    def __key(self):
        return self.score

    def __eq__(self, other):
        if isinstance(other, self.__class__) and \
           self.__key() == other.__key():
            return True
        return False

    def __gt__(self, other):
        if isinstance(other, self.__class__) and \
           self.__key() > other.__key():
            return True
        return False

    def __lt__(self, other):
        if isinstance(other, self.__class__) and \
           self.__key() < other.__key():
            return True
        return False

    def __hash__(self):
        return hash(self.__key())


def query_by_text(text, model):
    """Processes text queries to retrieve relevant images from database.

    Arguments:
    ----------
        text (str):
            User-input text query.
        model (tensorflow.saved_model):
            Universal sentence encoder (large) tensorflow saved model.

    Returns:
    --------
        results (list of pathlib.Path objects):
            List of paths to images retrieved for user query.
    """
    features = extract_features(text)
    keys = [get_similar_words(feature, 'coco.names', n=2) \
            for feature in features]
    keys = [word for similar_words in keys for word in similar_words]

    index_path = pathfinder.get('storyteller', 'assets', 'index.json')

    with open(index_path, 'r') as index_file:
        index = json.load(index_file)       

    # We need to perform membership test to check if a given image
    # identifier is already a part of ``image_ids``. 
    # Membership tests in sets is O(1) as opposed to that in lists,
    # which is O(n). Hence, the former is the preferred data structure
    # for ``image_ids``.
    image_paths = set([])

    for key in keys:
        items = set(index[key])
        image_paths |= items
        
    embeddings_path = pathfinder.get('storyteller', 'assets',
                                     'imageEmbeddingLocations.json')

    with open(embeddings_path, 'r') as embeddings_file:
        embeddings = json.load(embeddings_file)

    array = model([text]).numpy()[0]

    results = []
    for index, path in enumerate(image_paths):
        iid = Path(path).name
        embeddings_paths = embeddings[iid]

        similarity_scores = []
        for embedding_path in embeddings_paths:
            other_array = np.load(embedding_path)
            similarity_scores.append(dot_product(array, other_array))
        max_idx = similarity_scores.index(max(similarity_scores))

        results.append(ResultObject(name=iid,
                                    index=index,
                                    path_to_image=path,
                                    path_to_embed=embeddings_paths[max_idx],
                                    score=similarity_scores[max_idx]))

    # Using heaps to extract N largest results from a list of n elements
    # is recommended, as the time complexity to do so is O(n * logN), which
    # is approximately O(n) if N is relatively small.
    results = heapq.nlargest(5, results)
    results = [result.path_to_image for result in results]

    # Save predictions to storyteller/assets/predictions.
    save_predictions(results)
    return results


def query_by_image(image_path, weights_path, cfg_path, names_path, thresh):
    """Processes user-uploaded image to retrieve similar images from database.

    Arguments:
    ----------
        image (numpy.ndarray):
            Path for user-uploaded image, for reverse-image search.

    Returns:
    --------
        results (list of pathlib.Path objects):
            List of paths to images retrieved for user query.
    """
    net = get_yolo_net(cfg_path, weights_path)
    labels = get_labels(names_path)
    image = cv2.imread(str(image_path))
    objects = detect_objects(net, labels, image, thresh)



def save_predictions(results):
    """Saves predictions in storyteller/assets/predictions.

    Arguments:
    ----------
        results (list of pathlib.Path objects):
            List of results returned for user query / upload.
    """
    predictions_path = pathfinder.get('storyteller', 'assets', 'predictions')

    if predictions_path.is_dir():
        shutil.rmtree(str(predictions_path))
    predictions_path.mkdir()

    for path in results:
        shutil.copy(str(path), str(predictions_path))


if __name__ == '__main__':
    model = hub.load(MODULE_URL)
#    results = query_by_text("John threw a ball", model)
